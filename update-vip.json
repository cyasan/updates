{
  "version": "9.1.9",
  "update": [
    {
      "path": "plugins/ai/lbbai.js",
      "code": "const axios = require('axios');\nconst fs = require('fs');\nconst qs = require('qs');\nconst crypto = require('crypto');\nconst { G4F } = require(\"g4f\");\nconst g4f = new G4F();\n\nexports.run = {\nusage: ['lbbai'],\nhidden: ['gpt'],\nuse: 'text',\ncategory: 'ai',\nasync: async (m, { func, mecha, users, errorMessage }) => {\nconst whisper = require(fs.existsSync('../lib/whisper.js') ? './lib/whisper.js' : '../../lib/whisper.js');\nif (!m.text) return m.reply(func.example(m.cmd, 'Hai'))\nmecha.sendReact(m.chat, 'üïí', m.key)\ntry {\nlet messageId = 'MECHA' + func.makeid(8).toUpperCase() + 'GPT'\nlet response = await Lbbai(m.text, users.name.replaceAll('\\n', '\\t'))\nmecha.sendMessage(m.chat, {text: `${response}`}, {quoted: m, ephemeralExpiration: m.expiration, messageId: messageId});\n} catch (error) {\nmecha.sendReact(m.chat, '‚ùå', m.key)\nreturn errorMessage(error)\n}\n},\nmain: async (m, { func, mecha, users, quoted, errorMessage }) => {\nconst sendVoiceMessage = async (jid, text) => {\nawait tiktokTts(text, 'id_001').then(async result => {\nif (!result.success) return await mecha.sendMessage(jid, {text: text}, {quoted: m, ephemeralExpiration: m.expiration});\nreturn await mecha.sendMessage(jid, {audio: result.base64, mimetype: 'audio/mp4', ptt: true}, {quoted: m, ephemeralExpiration: m.expiration})\n})\n}\n\nif (m.budy && m.arg && /mecha/i.test(m.arg[0])) {\nif (!m.text) return m.reply('Halo! Ada yang bisa aku bantu hari ini?')\nmecha.sendReact(m.chat, 'üïí', m.key)\ntry {\nlet messageId = 'MECHA' + func.makeid(8).toUpperCase() + 'GPT'\nlet response = await Lbbai(m.text, users.name.replaceAll('\\n', '\\t'))\nmecha.sendMessage(m.chat, {text: `${response}`}, {quoted: m, ephemeralExpiration: m.expiration, messageId: messageId});\n} catch (error) {\nmecha.sendReact(m.chat, '‚ùå', m.key)\nreturn errorMessage(error)\n}\n} else if (m.budy && m.quoted && m.quoted.fromMe && m.quoted.id.endsWith('GPT') && !m.isPrefix) {\nmecha.sendReact(m.chat, 'üïí', m.key)\ntry {\nlet messageId = 'MECHA' + func.makeid(8).toUpperCase() + 'GPT'\n//let messageId = 'BAE5' + func.makeid(9).toUpperCase() + 'GPT'\nlet response = await Lbbai(m.budy, users.name.replaceAll('\\n', '\\t'))\nawait tiktokTts(response, 'id_001').then(async result => {\nif (!result.success) return mecha.sendMessage(m.chat, {text: `${response}`}, {quoted: m, ephemeralExpiration: m.expiration, messageId: messageId});\nawait mecha.sendMessage(m.chat, {audio: result.base64, mimetype: 'audio/mp4', ptt: true}, {quoted: m, ephemeralExpiration: m.expiration, messageId: messageId})\n})\nusers.limit -= 3\n} catch (error) {\nmecha.sendReact(m.chat, '‚ùå', m.key)\nreturn errorMessage(error)\n}\n}\nif (/audio/.test(m.mime) && m.seconds < 10 && !m.fromMe) {\nmecha.sendReact(m.chat, 'üïí', m.key)\ntry {\nlet messageId = 'MECHA' + func.makeid(8).toUpperCase() + 'GPT'\nlet media = await m.download();\ntry {\nvar result = (await whisper(media)).transcribe || '';\n} catch {\nvar result = '';\n}\nif (result === '') return mecha.sendReact(m.chat, '', m.key)\nif (!/mecha|luli|luly/i.test(result)) return mecha.sendReact(m.chat, '', m.key)\nconst text = result; //.replace(/mecha/g, '')\nif (m.isGc && m.isOwner && /tutup (grup|group)/i.test(text)) {\nif (!m.isBotAdmin) return sendVoiceMessage(m.chat, 'maaf tuan, saya bukan admin di grup ini.')\nawait mecha.groupSettingUpdate(m.chat, 'announcement')\n.then((res) => sendVoiceMessage(m.chat, 'baik tuan, grup ini sudah saya tutup.'))\n.catch((err) => sendVoiceMessage(m.chat, 'maaf tuan, terjadi kesalahan.'))\nreturn !0;\n} else if (m.isGc && m.isOwner && /buka (grup|group)/i.test(text)) {\nif (!m.isBotAdmin) return sendVoiceMessage(m.chat, 'maaf tuan, saya bukan admin di grup ini.')\nawait mecha.groupSettingUpdate(m.chat, 'not_announcement')\n.then((res) => sendVoiceMessage(m.chat, 'baik tuan, grup ini sudah saya buka.'))\n.catch((err) => sendVoiceMessage(m.chat, 'maaf tuan, terjadi kesalahan.'))\nreturn !0;\n}\nlet response = await Lbbai(text, users.name.replaceAll('\\n', '\\t'))\nmecha.sendMessage(m.chat, {text: `${response}`}, {quoted: m, ephemeralExpiration: m.expiration, messageId: messageId});\n} catch (error) {\nconsole.error(\"Error in main function:\", error);\nreturn mecha.reply(m.chat, String(error), m)\n}\n}\n},\nlimit: true\n}\n\nfunction detectLanguage(text) {\n// Daftar kata dasar sederhana untuk bahasa Inggris dan Indonesia\nconst englishWords = ['the', 'be', 'to', 'of', 'and', 'a', 'in', 'that', 'have', 'I'];\nconst indonesianWords = ['dan', 'di', 'yang', 'ke', 'dari', 'ini', 'itu', 'dengan', 'untuk', 'sebagai'];\n\nlet englishCount = 0;\nlet indonesianCount = 0;\n\nconst words = text.toLowerCase().split(/\\s+/);\n\nwords.forEach(word => {\nif (englishWords.includes(word)) {\nenglishCount++;\n}\nif (indonesianWords.includes(word)) {\nindonesianCount++;\n}\n});\n\nreturn englishCount > indonesianCount ? 'en_us_001' : 'id_001';\n}\n\nfunction bersihkanInput(input) {\n// Ekspresi reguler untuk mencocokkan karakter yang diizinkan\nconst regex = /[^a-zA-Z0-9.,! ]/g;\n// Mengganti semua karakter yang tidak diizinkan dengan string kosong\nconst bersih = input.replace(regex, '');\nreturn bersih;\n}\n\n\nasync function tiktokTts(text) {\ntry {\nconst modelVoice = detectLanguage(text);\nconst input = bersihkanInput(text);\nconst { status, data } = await axios('https://tiktok-tts.weilnet.workers.dev/api/generation', {\nmethod: \"POST\",\ndata: {\ntext: input,\nvoice: modelVoice\n},\nheaders: {\n\"content-type\": \"application/json\",\n},\n}\n);\nreturn {\nsuccess: true,\ncreator: 'SuryaDev',\nbase64: Buffer.from(data.data, \"base64\")\n}\n} catch (err) {\nconsole.log(err.response.data);\nreturn err.response.data;\n}\n}\n\nfunction generateUUIDv4() {\nreturn ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c => (c ^ crypto.randomBytes(1)[0] & 15 >> c / 4).toString(16));\n}\n\nasync function chatWithAI(text) {\ntry {\nconst conversation_uuid = generateUUIDv4();\nconst requestData = {\nconversation_uuid: conversation_uuid,\ntext: text,\nsent_messages: 1\n};\n\nconst config = {\nheaders: {\n'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n'Accept': '*/*',\n'X-Requested-With': 'XMLHttpRequest'\n}\n};\n\nconst response = await axios.post('https://www.timospecht.de/wp-json/cgt/v1/chat', qs.stringify(requestData), config);\nif (!response.data.success) return 'Terjadi kesalahan.'\nreturn response.data.data.message;\n} catch (error) {\nthrow new Error('Terjadi kesalahan:', error);\n}\n}\n\nasync function Lbbai(input, name) {\ntry {\nconst today = new Date();\nconst date = new Date(today.toLocaleString(\"en-US\", {timeZone: \"Asia/Jakarta\"}));\nconst hours = date.getHours();\nconst minutes = date.getMinutes();\nconst day = today.getDate();\nconst month = today.getMonth() + 1; // perhatikan bahwa bulan dimulai dari 0, maka ditambahkan 1.\nconst year = today.getFullYear();\n// mengambil nama hari dalam bahasa Inggris.\nconst dayOfWeek = today.toLocaleDateString(\"id-ID\", { weekday: \"long\" });\nconst timeNow = `${hours.toString().padStart(2, \"0\")}:${minutes.toString().padStart(2, \"0\")}`;\nconst getTodayDate = `Hari ini adalah ${dayOfWeek}, ${day}/${month}/${year}.`;\nconst sistem = `kamu adalah mecha, Bot WhatsApp dengan program kecerdasan buatan AI (artificial intelligence). jawab setiap pertanyaan dengan jawaban yang edukatif, jika ada yang bertanya tentang waktu kamu jawab yang berkaitan dengan ${timeNow} dan ${getTodayDate}, lawan bicaramu adalah ${name}, kamu memiliki sifat dingin dan sedikit tsundere imut, kamu dirancang dan dikembangkan oleh SuryaDev sejak tahun 2021, SuryaDev memiliki nama lengkap Jabal Surya Ngalam, berasal dari Jepara, lahir pada 21 mei 2005, dia adalah seseorang yang kreatif dan berbakat dalam menciptakan berbagai hal.`\nconst response = await axios.post('https://ragbot-starter.vercel.app/api/chat', {\nmessages: [\n{\nrole: \"system\",\ncontent: sistem\n},\n{\nrole: \"user\",\ncontent: input\n}\n],\nuseRag: true,\nllm: 'gpt-3.5-turbo',\nsimilarityMetric: 'cosine'\n});\nif (response.data.includes(\"I'm sorry, I don't know the answer.\")) {\nconst { data } = await axios.get(`https://api.vreden.my.id/api/qioo?query=${encodeURIComponent(input)}&username=${name}`)\nreturn (data.result || '').replace('Generated by BLACKBOX.AI, try unlimited chat https://www.blackbox.ai\\n\\n', '')\n} else {\nreturn response.data;\n}\n} catch (error) {\nthrow error;\n}\n}"
    },
    {
      "path": "plugins/ai/ai.js",
      "code": "/*\nScrape: Avosky\n*/\nconst axios = require('axios');\nconst cleanResponse = (text) => {\nreturn text\n.replace(/\\*\\*(.*?)\\*\\*/g, '$1')\n.replace(/__(.*?)__/g, '$1')\n.replace(/\\*(.*?)\\*/g, '$1')\n.replace(/_(.*?)_/g, '$1')\n.replace(/`(.*?)`/g, '$1')\n.replace(/\\[(.*?)\\]\\(.*?\\)/g, '$1')\n.replace(/~~(.*?)~~/g, '$1')\n.replace(/#+\\s*(.*)/g, '$1')\n.replace(/!\\[.*?\\]\\(.*?\\)/g, '')\n.replace(/<[^>]+>/g, '')\n.replace(/[ \\t]+/g, ' ')\n.replace(/\\$@\\$(.*?)\\$@\\$/g, '')\n.trim();\n};\nconst headers = {\n\"Content-Type\": \"application/json\",\n\"User-Agent\": \"Mozilla/5.0 (Linux; Android 12; Infinix HOT 40 Pro Build/SKQ1.210929.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/96.0.4664.45 Mobile Safari/537.36\",\n\"Accept\": \"application/json\", \n\"Accept-Language\": \"en-US,en;q=0.9,id;q=0.8\",\n\"Connection\": \"keep-alive\",\n\"Host\": \"bagoodex.io\",\n\"X-Requested-With\": \"XMLHttpRequest\",\n\"DNT\": \"1\",\n\"Sec-Ch-Ua\": '\"Google Chrome\";v=\"96\", \"Not A(Brand\";v=\"99\", \"Chromium\";v=\"96\"',\n\"Sec-Ch-Ua-Mobile\": '?1',\n\"Sec-Ch-Ua-Platform\": '\"Android\"',\n\"Referer\": \"https://bagoodex.io/\",\n\"Origin\": \"https://bagoodex.io\",\n\"Accept-Encoding\": \"gzip, deflate, br\",\n\"Cache-Control\": \"no-cache\"\n};\n\nexports.run = {\nusage: ['ai'],\nuse: 'question', \ncategory: 'ai',\nasync: async (m, { func, mecha, users }) => {\nconst processRequest = async (input, name) => {\nconst payload = {\nprompt: `kamu adalah Mecha, Bot WhatsApp dengan program kecerdasan buatan AI (artificial intelligence). jawab setiap pertanyaan dengan jawaban yang edukatif, lawan bicaramu adalah ${name}, kamu memiliki sifat dingin dan sedikit tsundere imut, kamu dirancang dan dikembangkan oleh SuryaDev sejak tahun 2021, SuryaDev memiliki nama lengkap Jabal Surya Ngalam, berasal dari Jepara, lahir pada 21 mei 2005, dia adalah seseorang yang kreatif dan berbakat dalam menciptakan berbagai hal.`,\nmessages: [{\ncontent: \"hai! aku siap membantu! apa yang bisa aku bantu? (*Ôºæ‚ñΩÔºæ)Ôºè\",\nrole: \"system\"\n}],\ninput: input\n};\nconst response = await axios.post('https://bagoodex.io/front-api/chat', payload, { headers });\nconst cleanedResponse = cleanResponse(response.data);\nreturn cleanedResponse;\n};\nif (!m.text) return m.reply(func.example(m.cmd, 'apa itu coding?'));\nmecha.sendReact(m.chat, 'üïí', m.key);\nconst replyText = await processRequest(m.text, users.name);\nmecha.sendReact(m.chat, '‚úÖ', m.key);\nmecha.reply(m.chat, replyText, m, {\nexpiration: m.expiration\n});\n},\nlimit: true\n}"
    },
    {
      "path": "plugins/searching/gmailstalk.js",
      "code": "/*\n*[ GMAIL PROFILE CHECKER ]*\n\nüßë‚Äçüíª Script Code by Daffa\n*/\nconst axios = require('axios');\nconst cheerio = require('cheerio');\nconst checkGmail = async (email) => {\nreturn new Promise(async (resolve, reject) => {\ntry {\nconst username = email.split('@')[0];\nconst { data } = await axios.post(\n'https://gmail-osint.activetk.jp/',\nnew URLSearchParams({\nq: username,\ndomain: 'gmail.com'\n}),\n{\nheaders: {\n'Content-Type': 'application/x-www-form-urlencoded',\n'User-Agent': 'Postify/1.0.0'\n}\n}\n);\nconst $ = cheerio.load(data);\nconst text = $('pre').text();\nconst extract = (regex, defaultValue = 'Tidak ada', checkNotFound = false) => {\nconst result = (text.match(regex) || [null, defaultValue])[1].trim();\nreturn checkNotFound && result === 'Not found.' ? 'Tidak ada' : result;\n};\nresolve({\nstatus: 200,\nresult: {\nemail: email,\nphotoProfile: extract(/Custom profile picture !\\s*=>\\s*(.*)/, 'Tidak ada'),\nlastEditProfile: extract(/Last profile edit : (.*)/),\ngoogleID: extract(/Gaia ID : (.*)/),\nuserTypes: extract(/User types : (.*)/),\ngoogleChat: {\nentityType: extract(/Entity Type : (.*)/),\ncustomerID: extract(/Customer ID : (.*)/, 'Tidak ada', true)\n},\ngooglePlus: {\nenterpriseUser: extract(/Entreprise User : (.*)/)\n},\nmapsData: {\nprofilePage: extract(/Profile page : (.*)/)\n},\nipAddress: text.includes('Your IP has been blocked by Google') ? 'Di blokir oleh Google' : 'Aman',\ncalendar: text.includes('No public Google Calendar') ? 'Tidak ada' : 'Ada'\n}\n});\n} catch (error) {\nresolve({\nstatus: 404,\nmsg: 'Email tidak ditemukan atau terjadi kesalahan!'\n});\n}\n});\n};\nexports.run = {\nusage: ['gmailstalk'],\nhidden: [],\nuse: 'email@gmail.com',\ncategory: 'searching',\nasync: async (m, { func, mecha }) => {\nif (!m.args[0]) return m.reply(func.example(m.cmd, 'example@gmail.com'))\nif (!m.args[0].endsWith('@gmail.com')) return m.reply('Masukkan email Gmail yang valid!')\nawait checkGmail(m.args[0]).then(data => {\nif (data.status == 404) return m.reply(data.msg)\nlet txt = `‰πÇ  *GMAIL CHECKER*\\n`\ntxt += `\\n‚ó¶  *Email:* ${data.result.email}`\ntxt += `\\n‚ó¶  *Photo Profile:* ${data.result.photoProfile}`\ntxt += `\\n‚ó¶  *Last Edit:* ${data.result.lastEditProfile}`\ntxt += `\\n‚ó¶  *Google ID:* ${data.result.googleID}`\ntxt += `\\n‚ó¶  *User Types:* ${data.result.userTypes}`\ntxt += `\\n‚ó¶  *Entity Type:* ${data.result.googleChat.entityType}`\ntxt += `\\n‚ó¶  *Customer ID:* ${data.result.googleChat.customerID}`\ntxt += `\\n‚ó¶  *Enterprise User:* ${data.result.googlePlus.enterpriseUser}`\ntxt += `\\n‚ó¶  *Profile Page:* ${data.result.mapsData.profilePage}`\ntxt += `\\n‚ó¶  *IP Status:* ${data.result.ipAddress}`\ntxt += `\\n‚ó¶  *Calendar:* ${data.result.calendar}`\nmecha.reply(m.chat, txt, m)\n})\n},\nlimit: true\n}"
    }
  ],
  "remove": [
    "system/baileys.js",
    "system/login.js"
  ]
}